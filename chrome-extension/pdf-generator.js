// PDF Generator for Chrome Extension
// This module handles PDF generation using Chrome's printing API

class PDFGenerator {
    constructor() {
        this.setupLogging();
    }

    async generatePDF(enhancedContent, settings) {
        this.logInfo('Starting PDF generation', { 
            title: enhancedContent.title,
            wordCount: enhancedContent.metadata?.wordCount 
        });

        try {
            // Create HTML template for PDF
            const htmlContent = this.createPDFTemplate(enhancedContent, settings);
            
            // Generate PDF using Chrome's printing API
            const pdfData = await this.generatePDFData(htmlContent);
            
            this.logInfo('PDF generation completed', { 
                size: pdfData.length,
                filename: this.generateFilename(enhancedContent.title)
            });
            
            return {
                pdfData: pdfData,
                filename: this.generateFilename(enhancedContent.title),
                size: pdfData.length
            };
            
        } catch (error) {
            this.logError('PDF generation failed', error);
            throw error;
        }
    }

    createPDFTemplate(enhancedContent, settings) {
        const { pdfStyle } = settings;
        
        return `
        <div class="pdf-container">
            <header class="pdf-header">
                <h1 class="title">${this.escapeHtml(enhancedContent.title)}</h1>
                <div class="metadata">
                    <p><strong>Source:</strong> ${this.escapeHtml(enhancedContent.originalUrl || 'Unknown')}</p>
                    <p><strong>Enhanced:</strong> ${new Date(enhancedContent.processingInfo?.enhancedAt || Date.now()).toLocaleDateString()}</p>
                    <p><strong>Reading Time:</strong> ${enhancedContent.metadata?.readingTime || 'Unknown'} minutes</p>
                </div>
            </header>
            
            <main class="pdf-content">
                ${enhancedContent.summary ? `
                    <section class="summary">
                        <h2>Summary</h2>
                        <p>${this.escapeHtml(enhancedContent.summary)}</p>
                    </section>
                ` : ''}
                
                <section class="enhanced-content">
                    <h2>Enhanced Content</h2>
                    <div class="content-body">
                        ${this.formatContentForPDF(enhancedContent.enhancedContent)}
                    </div>
                </section>
                
                ${enhancedContent.keyPoints && enhancedContent.keyPoints.length > 0 ? `
                    <section class="key-points">
                        <h2>Key Points</h2>
                        <ul>
                            ${enhancedContent.keyPoints.map(point => `<li>${this.escapeHtml(point)}</li>`).join('')}
                        </ul>
                    </section>
                ` : ''}
                
                ${enhancedContent.insights ? `
                    <section class="insights">
                        <h2>Insights & Analysis</h2>
                        <p>${this.escapeHtml(enhancedContent.insights)}</p>
                    </section>
                ` : ''}
                
                ${enhancedContent.recommendations ? `
                    <section class="recommendations">
                        <h2>Recommendations</h2>
                        <p>${this.escapeHtml(enhancedContent.recommendations)}</p>
                    </section>
                ` : ''}
                
                ${enhancedContent.sources && enhancedContent.sources.length > 0 ? `
                    <section class="sources">
                        <h2>Sources & References</h2>
                        <ul>
                            ${enhancedContent.sources.map(source => `
                                <li>
                                    <strong>${this.escapeHtml(source.title)}</strong><br>
                                    <a href="${this.escapeHtml(source.url)}">${this.escapeHtml(source.url)}</a><br>
                                    <em>${this.escapeHtml(source.relevance)}</em>
                                </li>
                            `).join('')}
                        </ul>
                    </section>
                ` : ''}
            </main>
            
            <footer class="pdf-footer">
                <p>Generated by AI Content-to-PDF Enhancer | ${new Date().toLocaleDateString()}</p>
            </footer>
        </div>`;
    }

    async generatePDFData(htmlContent) {
        try {
            // Create a complete HTML document with proper styling for PDF
            const fullHtmlDocument = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Content PDF</title>
    <style>
        @media print {
            body { margin: 0; padding: 20px; }
            .page-break { page-break-before: always; }
            .no-print { display: none; }
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .pdf-container {
            max-width: 800px;
            margin: 0 auto;
        }
        
        .pdf-header {
            border-bottom: 3px solid #667eea;
            padding-bottom: 30px;
            margin-bottom: 40px;
            text-align: center;
        }
        
        .title {
            font-size: 32px;
            color: #2c3e50;
            margin-bottom: 20px;
            font-weight: 700;
        }
        
        .metadata {
            font-size: 14px;
            color: #666;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .metadata p {
            margin: 5px 0;
        }
        
        .pdf-content section {
            margin-bottom: 40px;
            page-break-inside: avoid;
        }
        
        .pdf-content h2 {
            font-size: 24px;
            color: #2c3e50;
            margin-bottom: 20px;
            border-left: 5px solid #667eea;
            padding-left: 20px;
            font-weight: 600;
        }
        
        .pdf-content h3 {
            font-size: 20px;
            color: #34495e;
            margin: 25px 0 15px 0;
            font-weight: 600;
        }
        
        .pdf-content p {
            margin-bottom: 18px;
            text-align: justify;
            font-size: 16px;
        }
        
        .pdf-content ul, .pdf-content ol {
            margin: 20px 0;
            padding-left: 40px;
        }
        
        .pdf-content li {
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .pdf-content a {
            color: #667eea;
            text-decoration: none;
            border-bottom: 1px solid transparent;
            transition: border-bottom 0.3s ease;
        }
        
        .pdf-content a:hover {
            border-bottom-color: #667eea;
        }
        
        .summary {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            border-left: 5px solid #28a745;
        }
        
        .key-points {
            background: #e8f4fd;
            padding: 25px;
            border-radius: 10px;
            border-left: 5px solid #17a2b8;
        }
        
        .insights {
            background: #fff3cd;
            padding: 25px;
            border-radius: 10px;
            border-left: 5px solid #ffc107;
        }
        
        .recommendations {
            background: #d4edda;
            padding: 25px;
            border-radius: 10px;
            border-left: 5px solid #28a745;
        }
        
        .sources {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            border: 1px solid #dee2e6;
        }
        
        .sources ul {
            list-style: none;
            padding-left: 0;
        }
        
        .sources li {
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border-left: 3px solid #667eea;
        }
        
        .source-title {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .source-url {
            color: #667eea;
            font-size: 14px;
            margin-bottom: 8px;
            word-break: break-all;
        }
        
        .source-relevance {
            font-style: italic;
            color: #666;
            font-size: 14px;
        }
        
        .pdf-footer {
            border-top: 2px solid #dee2e6;
            padding-top: 30px;
            margin-top: 50px;
            text-align: center;
            color: #666;
            font-size: 14px;
        }
        
        @media print {
            .pdf-container {
                max-width: none;
                padding: 20px;
            }
            
            .pdf-content section {
                page-break-inside: avoid;
            }
            
            .pdf-content h2 {
                page-break-after: avoid;
            }
        }
        
        @page {
            margin: 1in;
            size: A4;
        }
    </style>
</head>
<body>
    ${htmlContent}
</body>
</html>`;

            // Create a data URL for the complete HTML document
            const dataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(fullHtmlDocument)}`;
            
            return dataUrl;
            
        } catch (error) {
            this.logError('PDF data generation failed', error);
            throw new Error('Failed to generate PDF data');
        }
    }

    formatContentForPDF(content) {
        // Convert markdown-like formatting to HTML
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/^/, '<p>')
            .replace(/$/, '</p>');
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    generateFilename(title) {
        const sanitized = title.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');
        return `enhanced_${sanitized}_${Date.now()}.html`;
    }

    setupLogging() {
        this.logs = [];
    }

    logInfo(message, data = {}) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: 'INFO',
            message,
            data
        };
        this.logs.push(logEntry);
        console.log('[PDF Generator]', logEntry);
    }

    logError(message, error) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: 'ERROR',
            message,
            error: error.message || error,
            stack: error.stack
        };
        this.logs.push(logEntry);
        console.error('[PDF Generator]', logEntry);
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PDFGenerator;
} else if (typeof window !== 'undefined') {
    window.PDFGenerator = PDFGenerator;
}
